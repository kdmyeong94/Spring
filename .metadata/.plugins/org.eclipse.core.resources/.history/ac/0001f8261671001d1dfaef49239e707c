package com.koreait.mylogin.loginweb.item;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.koreait.item.domain.item.DeliveryCode;
import com.koreait.item.domain.item.Item;
import com.koreait.item.domain.item.ItemRepository;
import com.koreait.item.domain.item.ItemType;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/basic/items")
@RequiredArgsConstructor 
public class ItemController {
	
	private final ItemRepository itemRepository;
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "basic/items";
	}
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}") // 변수로 경로 받아오기
	public String item(@PathVariable long itemId, Model model) { // 어노테이션 후 파라미터는 선언해준 변수에 맞춰주기
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/item";
	}
	
	
	
//	------------------ add ---------------------
	
	@GetMapping("/add")
	//-------------------1129 1058-----------
	public String addForm(Model model) {		
		model.addAttribute("item",new Item());
		return "basic/addForm";
	}
	
//	@PostMapping("/add")
	public String save( @RequestParam String itemName, @RequestParam int price, @RequestParam Integer quantity, Model model) {
		Item item = new Item();
		item.setItemName(itemName);
		item.setPrice(price);
		item.setQuantity(quantity);
		
		itemRepository.save(item);
		model.addAttribute("item",item);
		return "basic/item";
	}
	
//	@PostMapping("/add")
	public String saveV2( @ModelAttribute("item")Item item) {
		
		// @ModerlAttribute 가 해주는 역할
//			@RequestParam String itemName, @RequestParam int price, @RequestParam Integer quantity,	Model model) {
		
//		Item item = new Item();
//		item.setItemName(itemName);
//		item.setPrice(price);
//		item.setQuantity(quantity);
		
		itemRepository.save(item);
//		model.addAttribute("item",item);
		return "basic/item";
	}
	
	
	/*
	 *  @ModelAttribute 에서 name 생략 
	 *  -> 생략시 model에 저장되는 name은 클래스명의 첫 글자만 소문자로 등록
	 *  	Item -> item
	 */
//	@PostMapping("/add")
	public String saveV3( @ModelAttribute Item item) {					
		itemRepository.save(item);		
		return "basic/item";
	}
	
	/*
	 *  @ModelAttribute 자체도 생략 가능, 그러나 가독성을 위해 권장하지 않음
	 */
//	@PostMapping("/add")
	public String saveV4( Item item) {					
		itemRepository.save(item);		
		return "basic/item";
	}
	
	// redirect 방식으로 넘겨주어야 새로고침등 불필요한 행동시 추가 생성 되는 것을 막을 수 있다.
//	@PostMapping("/add")
	public String saveV5( Item item) {					
		itemRepository.save(item);		
		return "redirect:/basic/items/" + item.getId();
	}
	
	/*
	 * redirect:/basic/items/{itemId}
	 * 	-> @PathVariable		: {itemId}
	 * 	-> 나머지는 파라미터로 처리	: ?status=true
	 * 	즉 매핑시켜서 적어준 값들은 경로로 들어가고 그외 직접 적어주지 않은 값들은 파라미터로 들어간다. 
	 */
//	@PostMapping("/add")
	public String saveV6( Item item, RedirectAttributes redirectAttributes ) {
		//-------------------1129 1058-----------
		System.out.println("item.open = " + item.getOpen());
		//-------------------1129 1058-----------ㅇ
		
		//11290228-----
		System.out.println("item.regions = " + item.getRegions());
		//11290228-----
		
		//1129 0318--------
		System.out.println("item.itemType = " + item.getItemType());
		//1129 0318--------
		
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
	
	/*
	 *  BindingResult : 
	 *  	- Item 객체에 값이 잘 담기지 않을때  BindingResult 객체에 값이 담긴다.
	 *  	- 스프링이 제공하는 검증 오류를 보관하는 객체, 검증 오류가 발생하면 여기에 보관
	 *  	- 주의) BindingResult는 검증할 대상 바로 다음에 와야 한다. 순서가 중요!
	 *  	- BindingResult는 Model에 자동으로 포함된다
	 */
//	@PostMapping("/add")
	public String saveV7( Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes ) {

//		if(item.getItemName()==null) {
		
		/* 
		 * StringUtils.hasText
		 * 	- 값이 있을 경우에는 true, 공백이나 null이 들어올 경우에는 false를 반환하게 된다.
		 */
		
		if(!StringUtils.hasText(item.getItemName())) {
			// FieldError : field 단위의 error를 처리하는 spring에서 제공해주는 객체
			bindingResult.addError(new FieldError("item", "itemName", "상품이름은 필수입니다."));
		}
		
		/*
		 * price
		 * 	- 조건 : null, 1000원 미만, 10000000초과
		 */
		if( item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
			bindingResult.addError( new FieldError("item", "price", "가격은 1,000~1,000,000까지만 허용합니다"));
		}
		
		/*
		 * quantity
		 * 	- 조건 : null, 최대 9999까지만 허용
		 */
		if( item.getQuantity() == null || item.getQuantity() > 10000) {
			bindingResult.addError(new FieldError("item", "quantity", "수량은 최대 9,999 까지 허용합니다."));
		}
		
		// 검증 실패하면 다시 입력 폼으로
        if(bindingResult.hasErrors()) {
        	System.out.println("errors = " + bindingResult);
        	return "basic/addForm";
        }
        				
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
	
	@PostMapping("/add")
	public String saveV8( Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes ) {

		/* 파라미터에 대한 설명
		 *  FieldError param
		 *  	- objectName	: 오류가 발생한 객체 이름
		 *  	- field			: 오류 필드
		 *  	- rejectedValue	: 사용자가 입력한 값 ( 거절된 값 )
		 *  	- bindingFailure: 타입오류와 같은 바인딩 실패인지 구분
		 *  	- codes			: 메시지 코드
		 *  	- argumnets		: 메시지에서 사용하는 인자
		 *  	- defaultMessage: 기본 오류 메세지		
		 */
		if(!StringUtils.hasText(item.getItemName())) {
//			bindingResult.addError(new FieldError("item", "itemName", "상품이름은 필수입니다."));
			bindingResult.addError(new FieldError("itme", "itemName", item.getItemName(), false, new String[] { "required.item.itemName","required.default"}, null,  null));
		}

		if( item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
//			bindingResult.addError( new FieldError("item", "price", "가격은 1,000~1,000,000까지만 허용합니다"));
			bindingResult.addError(new FieldError("itme", "price", item.getPrice(), false, new String[] {"range.item.price"} , new Object[] {1000,10000}, null));
		}

		if( item.getQuantity() == null || item.getQuantity() > 10000) {
//			bindingResult.addError(new FieldError("item", "quantity", "수량은 최대 9,999 까지 허용합니다."));
			bindingResult.addError(new FieldError("itme", "quantity", item.getQuantity(), false, new String[] {"max.item.quantity"}, new Object[] {9999}, null));
		}
		
		// 검증 실패하면 다시 입력 폼으로
        if(bindingResult.hasErrors()) {
        	System.out.println("errors = " + bindingResult);
        	return "basic/addForm";
        }
        				
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
//	------------------ add ---------------------
	
	@GetMapping("/{itemId}/edit")
	public String editForm( @PathVariable Long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/editForm";
	}
	
	@PostMapping("/{itemId}/edit")
	public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
		itemRepository.update(itemId, item);
		// 상세페이지로 이동
		return "redirect:/basic/items/{itemId}";
	}
	
	
	
	
	
	// 테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("teatA", 10000, 10));
		itemRepository.save(new Item("teatB", 20000, 20));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
	
	
}
