package com.koreait.item.domain.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.koreait.item.domain.item.DeliveryCode;
import com.koreait.item.domain.item.Item;
import com.koreait.item.domain.item.ItemRepository;
import com.koreait.item.domain.item.ItemType;

import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/basic/items")
@RequiredArgsConstructor 
// @RequiredArgsConstructor : lombok에서 제공되는 기능, final이 붙은 멤버변수만 사용해서 생성자를 자동으로 만들어준다.
public class ItemController {
	
	private final ItemRepository itemRepository;
	
//	@Autowired
	// 생성자가 1개만 있으면 @Autowired 생략가능
//	public ItemController(ItemRepository itemRepository) {   //@RequiredArgsConstructor가 생성자를 대신 만들어주기때문에 생략가능
//		this.itemRepository = itemRepository;
//	}
	
	// @ModelAttribute : Controller를 호출할때 ( 어떤 메서드가 호출이 되던간에)
	//					model에 자동으로 해당 내용이 담기는게 보장된다.
	
	//11290138--------------------------
	@ModelAttribute("regions")
	public Map<String, String> regions(){
		
		// LinkedHashMap : 순서가 보장되는 hashmap
		Map<String, String> regions = new LinkedHashMap<String, String>();
		regions.put("SEOUL", "서울");
		regions.put("BUSAN", "부산");
		regions.put("JEJU", "제주");
		// model.addAttribute("regions", regions); // 키값은 @ModelAttribute("regions") 의 regions이기때문에 생략가능 
													// 즉 @ModelAttribute("regions")에 regions.put이 바로 적용됨
		return regions;
	}
	//11290138--------------------------
	
	//1129 0255 -----------------
	@ModelAttribute("itemType")
	public ItemType[] itemType() {
		// enum에 있는 값을 배열로 넘겨준다.
		return ItemType.values();
	}
	//1129 0255 -----------------
	
	//1129 0345----------------
	@ModelAttribute("deliveryCodes")
	public List<DeliveryCode> deliveryCodes(){
		List<DeliveryCode> deliveryCodes = new ArrayList<DeliveryCode>();
		deliveryCodes.add( new DeliveryCode("FAST", "빠른배송"));
		deliveryCodes.add( new DeliveryCode("NORMAL", "일반배송"));
		deliveryCodes.add( new DeliveryCode("SLOW", "느린배송"));
		return deliveryCodes;
	}
	//1129 0345----------------
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "basic/items";
	}
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}") // 변수로 경로 받아오기
	public String item(@PathVariable long itemId, Model model) { // 어노테이션 후 파라미터는 선언해준 변수에 맞춰주기
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/item";
	}
	
	
	
//	------------------ add ---------------------
	
	@GetMapping("/add")
	//-------------------1129 1058-----------
	public String addForm(Model model) {		
		model.addAttribute("item",new Item());
		//-------------------1129 1058-----------
		
		//1129 0129=-------------------
		
		// LinkedHashMap : 순서가 보장되는 hashmap
		//하지만 스프링에선 이렇게 사용하지 않음.... 대신 에 @Modelattribute로 이동
//		Map<String, String> regions = new LinkedHashMap<String, String>();
//		regions.put("SEOUL", "서울");
//		regions.put("BUSAN", "부산");
//		regions.put("JEJU", "제주");
//		model.addAttribute("regions", regions);
		//1129 0129=-------------------
		
		return "basic/addForm";
	}
	
//	@PostMapping("/add")
	public String save( @RequestParam String itemName, @RequestParam int price, @RequestParam Integer quantity, Model model) {
		Item item = new Item();
		item.setItemName(itemName);
		item.setPrice(price);
		item.setQuantity(quantity);
		
		itemRepository.save(item);
		model.addAttribute("item",item);
		return "basic/item";
	}
	
//	@PostMapping("/add")
	public String saveV2( @ModelAttribute("item")Item item) {
		
		// @ModerlAttribute 가 해주는 역할
//			@RequestParam String itemName, @RequestParam int price, @RequestParam Integer quantity,	Model model) {
		
//		Item item = new Item();
//		item.setItemName(itemName);
//		item.setPrice(price);
//		item.setQuantity(quantity);
		
		itemRepository.save(item);
//		model.addAttribute("item",item);
		return "basic/item";
	}
	
	
	/*
	 *  @ModelAttribute 에서 name 생략 
	 *  -> 생략시 model에 저장되는 name은 클래스명의 첫 글자만 소문자로 등록
	 *  	Item -> item
	 */
//	@PostMapping("/add")
	public String saveV3( @ModelAttribute Item item) {					
		itemRepository.save(item);		
		return "basic/item";
	}
	
	/*
	 *  @ModelAttribute 자체도 생략 가능, 그러나 가독성을 위해 권장하지 않음
	 */
//	@PostMapping("/add")
	public String saveV4( Item item) {					
		itemRepository.save(item);		
		return "basic/item";
	}
	
	// redirect 방식으로 넘겨주어야 새로고침등 불필요한 행동시 추가 생성 되는 것을 막을 수 있다.
//	@PostMapping("/add")
	public String saveV5( Item item) {					
		itemRepository.save(item);		
		return "redirect:/basic/items/" + item.getId();
	}
	
	/*
	 * redirect:/basic/items/{itemId}
	 * 	-> @PathVariable		: {itemId}
	 * 	-> 나머지는 파라미터로 처리	: ?status=true
	 * 	즉 매핑시켜서 적어준 값들은 경로로 들어가고 그외 직접 적어주지 않은 값들은 파라미터로 들어간다. 
	 */
//	@PostMapping("/add")
	public String saveV6( Item item, RedirectAttributes redirectAttributes ) {
		//-------------------1129 1058-----------
		System.out.println("item.open = " + item.getOpen());
		//-------------------1129 1058-----------ㅇ
		
		//11290228-----
		System.out.println("item.regions = " + item.getRegions());
		//11290228-----
		
		//1129 0318--------
		System.out.println("item.itemType = " + item.getItemType());
		//1129 0318--------
		
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
	
	/*
	 *  BindingResult : 
	 *  	- Item 객체에 값이 잘 담기지 않을때  BindingResult 객체에 값이 담긴다.
	 *  	- 스프링이 제공하는 검증 오류를 보관하는 객체, 검증 오류가 발생하면 여기에 보관
	 *  	- 주의) BindingResult는 검증할 대상 바로 다음에 와야 한다. 순서가 중요!
	 *  	- BindingResult는 Model에 자동으로 포함된다
	 */
	@PostMapping("/add")
	public String saveV7( Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes ) {
//		//-------------------1129 1058-----------
//		System.out.println("item.open = " + item.getOpen());
//		//-------------------1129 1058-----------ㅇ
//		
//		//11290228-----
//		System.out.println("item.regions = " + item.getRegions());
//		//11290228-----
//		
//		//1129 0318--------
//		System.out.println("item.itemType = " + item.getItemType());
//		//1129 0318--------
		
//		if(item.getItemName()==null) {
		
		/* 
		 * StringUtils.hasText
		 * 	- 값이 있을 경우에는 true, 공백이나 null이 들어올 경우에는 false를 반환하게 된다.
		 */
		
		if(!StringUtils.hasText(item.getItemName())) {
			// FieldError : field 단위의 error를 처리하는 spring에서 제공해주는 객체
			bindingResult.addError(new FieldError("item", "itemName", "상품이름은 필수입니다."));
		}
		
		/*
		 * price
		 * 	- 조건 : null, 1000원 미만, 10000000초과
		 */
		if( item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
			bindingResult.addError( new FieldError("item", "price", "가격은 1,000~1,000,000까지만 허용합니다"));
		}
		
		/*
		 * quantity
		 * 	- 조건 : null, 최대 9999까지만 허용
		 */
		if( item.getQuantity() == null || item.getQuantity() > 10000) {
			bindingResult.addError(new FieldError("item", "quantity", "수량은 최대 9,999 까지 허용합니다."));
		}
		
		// 검증 실패하면 다시 입력 폼으로
        if(bindingResult.hasErrors()) {
        	System.out.println("errors = " + bindingResult);
        	return "basic/addForm";
        }
        				
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
//	------------------ add ---------------------
	
	@GetMapping("/{itemId}/edit")
	public String editForm( @PathVariable Long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/editForm";
	}
	
	@PostMapping("/{itemId}/edit")
	public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
		itemRepository.update(itemId, item);
		// 상세페이지로 이동
		return "redirect:/basic/items/{itemId}";
	}
	
	
	
	
	
	// 테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("teatA", 10000, 10));
		itemRepository.save(new Item("teatB", 20000, 20));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
	
	
}
