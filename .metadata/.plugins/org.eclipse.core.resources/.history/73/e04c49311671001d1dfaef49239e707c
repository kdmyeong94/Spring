package com.koreait.mylogin.loginweb.item;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/basic/items")
@RequiredArgsConstructor 
public class ItemController {
	
	private final ItemRepository itemRepository;
	
	@GetMapping
	public String items(Model model) {
		List<Item> items = itemRepository.findAll();
		model.addAttribute("items", items);
		return "basic/items";
	}
	
	// /basic/items/아이템의ID
	@GetMapping("/{itemId}") // 변수로 경로 받아오기
	public String item(@PathVariable long itemId, Model model) { // 어노테이션 후 파라미터는 선언해준 변수에 맞춰주기
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/item";
	}
	
	
	@PostMapping("/add")
	public String saveV8( Item item, BindingResult bindingResult, RedirectAttributes redirectAttributes ) {

		/* 파라미터에 대한 설명
		 *  FieldError param
		 *  	- objectName	: 오류가 발생한 객체 이름
		 *  	- field			: 오류 필드
		 *  	- rejectedValue	: 사용자가 입력한 값 ( 거절된 값 )
		 *  	- bindingFailure: 타입오류와 같은 바인딩 실패인지 구분
		 *  	- codes			: 메시지 코드
		 *  	- argumnets		: 메시지에서 사용하는 인자
		 *  	- defaultMessage: 기본 오류 메세지		
		 */
		if(!StringUtils.hasText(item.getItemName())) {
//			bindingResult.addError(new FieldError("item", "itemName", "상품이름은 필수입니다."));
			bindingResult.addError(new FieldError("itme", "itemName", item.getItemName(), false, new String[] { "required.item.itemName","required.default"}, null,  null));
		}

		if( item.getPrice() == null || item.getPrice() < 1000 || item.getPrice() > 1000000) {
//			bindingResult.addError( new FieldError("item", "price", "가격은 1,000~1,000,000까지만 허용합니다"));
			bindingResult.addError(new FieldError("itme", "price", item.getPrice(), false, new String[] {"range.item.price"} , new Object[] {1000,10000}, null));
		}

		if( item.getQuantity() == null || item.getQuantity() > 10000) {
//			bindingResult.addError(new FieldError("item", "quantity", "수량은 최대 9,999 까지 허용합니다."));
			bindingResult.addError(new FieldError("itme", "quantity", item.getQuantity(), false, new String[] {"max.item.quantity"}, new Object[] {9999}, null));
		}
		
		// 검증 실패하면 다시 입력 폼으로
        if(bindingResult.hasErrors()) {
        	System.out.println("errors = " + bindingResult);
        	return "basic/addForm";
        }
        				
		Item saveitem = itemRepository.save(item);
		redirectAttributes.addAttribute("itemId", saveitem.getId());
		redirectAttributes.addAttribute("status", true);
		return "redirect:/basic/items/{itemId}";
	}
//	------------------ add ---------------------
	
	@GetMapping("/{itemId}/edit")
	public String editForm( @PathVariable Long itemId, Model model) {
		Item item = itemRepository.findById(itemId);
		model.addAttribute("item", item);
		return "basic/editForm";
	}
	
	@PostMapping("/{itemId}/edit")
	public String edit(@PathVariable Long itemId, @ModelAttribute Item item) {
		itemRepository.update(itemId, item);
		// 상세페이지로 이동
		return "redirect:/basic/items/{itemId}";
	}
	
	
	
	
	
	// 테스트용 데이터 추가
	@PostConstruct
	public void init() {
//		System.out.println("초기화 메서드");
		itemRepository.save(new Item("teatA", 10000, 10));
		itemRepository.save(new Item("teatB", 20000, 20));
	}
	
	@PreDestroy
	public void destroy() {
		System.out.println("종료 메서드");
	}
	
	
}
